# CONFIG_SITE

# Make any application-specific changes to the EPICS build
#   configuration variables in this file.
#
# Host/target specific settings can be specified in files named
#   CONFIG_SITE.$(EPICS_HOST_ARCH).Common
#   CONFIG_SITE.Common.$(T_A)
#   CONFIG_SITE.$(EPICS_HOST_ARCH).$(T_A)

# CHECK_RELEASE controls the consistency checking of the support
#   applications pointed to by the RELEASE* files.
# Normally CHECK_RELEASE should be set to YES.
# Set CHECK_RELEASE to NO to disable checking completely.
# Set CHECK_RELEASE to WARN to perform consistency checking but
#   continue building anyway if conflicts are found.
CHECK_RELEASE = YES

# Set this when you only want to compile this application
#   for a subset of the cross-compiled target architectures
#   that Base is built for.
ifeq '$(EPICS_HOST_ARCH)' 'rhel6-x86_64'
CROSS_COMPILER_TARGET_ARCHS     +=  linuxRT-x86_64
endif
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linux-arm%,         $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linux-x86,          $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linuxRT-i686,       $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linuxRT_glibc-i686, $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out linuxRT-arm_zynq,   $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out vxWorks%,           $(CROSS_COMPILER_TARGET_ARCHS))
CROSS_COMPILER_TARGET_ARCHS := $(filter-out RTEMS%,             $(CROSS_COMPILER_TARGET_ARCHS))

# To install files into a location other than $(TOP) define
#   INSTALL_LOCATION here.
#INSTALL_LOCATION=</path/name/to/install/top>

# Set this when your IOC and the host use different paths
#   to access the application. This will be needed to boot
#   from a Microsoft FTP server or with some NFS mounts.
# You must rebuild in the iocBoot directory for this to
#   take effect.
#IOCS_APPL_TOP = </IOC/path/to/application/top>

# Get settings from AREA_DETECTOR, so we only have to configure once for all detectors if we want to
-include $(AREA_DETECTOR)/configure/CONFIG_SITE
-include $(AREA_DETECTOR)/configure/CONFIG_SITE.$(EPICS_HOST_ARCH)
-include $(AREA_DETECTOR)/configure/CONFIG_SITE.$(EPICS_HOST_ARCH).Common
ifdef T_A
  -include $(AREA_DETECTOR)/configure/CONFIG_SITE.Common.$(T_A)
  -include $(AREA_DETECTOR)/configure/CONFIG_SITE.$(EPICS_HOST_ARCH).$(T_A)
endif

#ROGUE_DIR=/reg/neh/home/bhill/git-wa-neh/slaclab/rogue-git
ROGUE_DIR=/reg/neh/home/bhill/git-wa-neh/slaclab/rogue-no-python-git

PGP_DRIVER_DIR=/reg/neh/home/bhill/git-wa-neh/slaclab/aes-stream-drivers-git
PGP_DRIVER_INCLUDE	= $(PGP_DRIVER_DIR)/include

ROGUE_INCLUDE		= $(ROGUE_DIR)/include
ROGUE_LIB			= $(ROGUE_DIR)/lib

USR_CXXFLAGS += -std=c++11
USR_INCLUDES += -I$(PGP_DRIVER_INCLUDE)
USR_INCLUDES += -I$(ROGUE_INCLUDE)

#CONDA_DIR=/reg/neh/home/bhill/miniconda3/envs/rogue-build-noepics
ifdef CONDA_DIR
	GNU_DIR       = $(CONDA_DIR)
	CMPLR_PREFIX  = x86_64-conda_cos6-linux-gnu-
	USR_INCLUDES += -I$(CONDA_DIR)/include/python3.7m

	BOOST_DIR=$(CONDA_DIR)
	USR_INCLUDES += -I$(BOOST_DIR)/include

	python3.7m_DIR		= $(CONDA_DIR)/lib
	boost_python37_DIR	= $(CONDA_DIR)/lib
	boost_thread_DIR	= $(CONDA_DIR)/lib
	bz2_DIR				= $(CONDA_DIR)/lib
	zmq_DIR				= $(CONDA_DIR)/lib
	readline_DIR		= $(CONDA_DIR)/lib
	ncurses_DIR			= $(CONDA_DIR)/lib
	USR_LDFLAGS			+= -L$(CONDA_DIR)/lib
else
	bz2_DIR				= $(PSPKG_ROOT)/release/bzip2/1.0.6/$(T_A)/lib
	zmq_DIR				= $(PSPKG_ROOT)/release/zeromq/4.1.5/$(T_A)/lib
endif

SHARED_LIBRARIES = YES
STATIC_BUILD     = NO

