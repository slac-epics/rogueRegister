#
# Wave8Base rogue PVs
#
# Required macros:
#	P				- Prefix
#	R				- Region, common camera PV prefix is $(P)$(R)
#	B				- Board number
#	L				- Lane number
#
# Optional macros
#	TIMEOUT			- Defaults to 1 sec
#

# SystemReg Trigger Source Select
record( mbbi, "$(P)$(R)SystemRegs:TrigSrcSel_RBV" )
{
	field( DESC, "Trigger Source Select" )
	field( INP,  "@B$(B) L$(L) $(PTOP).SystemRegs.TrigSrcSel" )
	field( DTYP, "RogueMBBI" )
	field( ZRVL, "0" ) field( ZRST, "ExtTTL" )
	field( ONVL, "1" ) field( ONST, "SWTrig" )
	field( TWVL, "2" ) field( TWST, "Rsrvd2" )
	field( THVL, "3" ) field( THST, "Rsrvd3" )
	field( FRVL, "4" ) field( FRST, "Rsrvd4" )
	field( FVVL, "5" ) field( FVST, "Rsrvd5" )
	field( SXVL, "6" ) field( SXST, "Rsrvd6" )
	field( SVVL, "7" ) field( SVST, "IntAuto" )
	info( autosaveFields, "" )
}

record( mbbo, "$(P)$(R)SystemRegs:TrigSrcSel" )
{
	field( DESC, "Trigger Source Select" )
	field( OUT,  "@B$(B) L$(L) $(PTOP).SystemRegs.TrigSrcSel" )
	field( DTYP, "RogueMBBO" )
	field( ZRVL, "0" ) field( ZRST, "ExtTTL" )
	field( ONVL, "1" ) field( ONST, "SWTrig" )
	field( TWVL, "2" ) field( TWST, "Rsrvd2" )
	field( THVL, "3" ) field( THST, "Rsrvd3" )
	field( FRVL, "4" ) field( FRST, "Rsrvd4" )
	field( FVVL, "5" ) field( FVST, "Rsrvd5" )
	field( SXVL, "6" ) field( SXST, "Rsrvd6" )
	field( SVVL, "7" ) field( SVST, "IntAuto" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)SystemRegs:TrigSrcSel_RBV" )
	info( autosaveFields, "VAL" )
}
alias( "$(P)$(R)SystemRegs:TrigSrcSel",     "$(P)$(R)Top:SystemRegs:TrigSrcSel" )
alias( "$(P)$(R)SystemRegs:TrigSrcSel_RBV", "$(P)$(R)Top:SystemRegs:TrigSrcSel_RBV" )

# Inputs:
#	A:	Board number
#	B:	Lane  number
# Outputs:
#	A:	CalibrationStatus
record( stringout, "$(P)$(R)AdcCalibration" )
{
	field( VAL,  "Calibrating..." )
	field( OUT,  "$(P)$(R)AdcCalibStatus CA NMS" )
#	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)AdcCalibrationSub.PROC CA NMS" )
}
record( aSub, "$(P)$(R)AdcCalibrationSub" )
{
	field( FTA,	 "LONG"	  ) field( INPA, "$(B)" )
	field( FTB,	 "LONG"	  ) field( INPB, "$(L)" )
	field( FTVA, "STRING" ) field( OUTA, "$(P)$(R)AdcCalibStatus CA MS" )
	field( SNAM, "AdcCalibration" )
#	field( DISV, "0" )
#	field( SDIS, "$(P)$(R)PgpMon:RxRemLinkReady_RBV CP" )
}

record( stringout, "$(P)$(R)AdcCalibStatus" )
{
}

# Put monitors
# Note: SER_OK_PV macro refers to typical use in serial I/O, but same principle here.
#		We just need one PV whose SEVR field is monitored to keep all the putMonitors
#		from processing while communications to the wave8 are down.
substitute "SER_OK_PV=$(P)$(R)AxiVersion:UpTime"
substitute "MON_PV=$(P)$(R)RawBuffers:BuffLen"
substitute "MON_VALUE=1"
include "putMonitor.template"
