#
# TriggerEventManager rogue PVs
#
# Required macros:
#	P				- Prefix
#	R				- Region, common camera PV prefix is $(P)$(R)
#	B				- Board number
#	L				- Lane number
#	PTOP			- Rogue path to top of TriggerEventManager
#
# Optional macros
#	TIMEOUT			- Defaults to 1 sec
#

# LCLS-I Dest Select
record( mbbi, "$(P)$(R)EvrV2:DestSel_RBV" )
{
	field( DESC, "LCLS-I Dest Select" )
	field( INP,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].DestSel" )
	field( DTYP, "RogueMBBI" )
	field( ZRVL, "0" ) field( ZRST, "Inclusive" )
	field( ONVL, "1" ) field( ONST, "Exclusive" )
	field( TWVL, "2" ) field( TWST, "Don't care" )
	field( THVL, "3" ) field( THST, "Reserved" )
	info( autosaveFields, "" )
}

record( mbbo, "$(P)$(R)EvrV2:DestSel" )
{
	field( DESC, "LCLS-I Dest Select" )
	field( OUT,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].DestSel" )
	field( DTYP, "RogueMBBO" )
	field( ZRVL, "0" ) field( ZRST, "Inclusive" )
	field( ONVL, "1" ) field( ONST, "Exclusive" )
	field( TWVL, "2" ) field( TWST, "Don't care" )
	field( THVL, "3" ) field( THST, "Reserved" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EvrV2:DestSel_RBV" )
	info( autosaveFields, "VAL" )
}

# LCLS-I Dest Type
record( mbbi, "$(P)$(R)EvrV2:DestType_RBV" )
{
	field( DESC, "LCLS-I Dest Type" )
	field( INP,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].DestType" )
	field( DTYP, "RogueMBBI" )
	field( ZRVL, "0" ) field( ZRST, "BeamRequest" )
	field( ONVL, "1" ) field( ONST, "NotBeamRequest" )
	field( TWVL, "2" ) field( TWST, "All" )
	field( THVL, "3" ) field( THST, "Invalid" )
	info( autosaveFields, "" )
}

record( mbbo, "$(P)$(R)EvrV2:DestType" )
{
	field( DESC, "LCLS-I Dest Type" )
	field( OUT,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].DestType" )
	field( DTYP, "RogueMBBO" )
	field( DOL,  "2" )
	field( ZRVL, "0" ) field( ZRST, "BeamRequest" )
	field( ONVL, "1" ) field( ONST, "NotBeamRequest" )
	field( TWVL, "2" ) field( TWST, "All" )
	field( THVL, "3" ) field( THST, "Invalid" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EvrV2:DestType_RBV" )
	info( autosaveFields, "VAL" )
}

# Trigger Channel EnableReg
record( bi, "$(P)$(R)EvrV2:EnableReg_RBV" )
{
	field( DESC, "Enables trigger channel for EvrV2 Timing" )
	field( INP,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].EnableReg" )
	field( DTYP, "RogueBI" )
	field( ZNAM, "Disabled" )
	field( ONAM, "Enabled" )
	field( SCAN, "$(SCAN=1 second)" )
	info( autosaveFields, "" )
}
record( bo, "$(P)$(R)EvrV2:EnableReg" )
{
	field( DESC, "Enables trigger channel for EvrV2 Timing" )
	field( OUT,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].EnableReg" )
	field( DTYP, "RogueBO" )
	field( ZNAM, "Disabled" )
	field( ONAM, "Enabled" )
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EvrV2:EnableReg_RBV" )
	info( autosaveFields, "VAL" )
}

# Timing Rate Type
record( mbbi, "$(P)$(R)EvrV2:RateType_RBV" )
{
	field( DESC, "Timing Rate Type" )
	field( INP,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].RateType" )
	field( DTYP, "RogueMBBI" )
	field( ZRVL, "0" ) field( ZRST, "FixedRates" )
	field( ONVL, "1" ) field( ONST, "AcRates" )
	field( TWVL, "2" ) field( TWST, "ControlWord" )
	field( THVL, "3" ) field( THST, "INVALID" )
	info( autosaveFields, "" )
}

record( mbbo, "$(P)$(R)EvrV2:RateType" )
{
	field( DESC, "Timing Rate Type" )
	field( OUT,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].RateType" )
	field( DTYP, "RogueMBBO" )
	field( DOL,  "2" )
	field( ZRVL, "0" ) field( ZRST, "FixedRates" )
	field( ONVL, "1" ) field( ONST, "AcRates" )
	field( TWVL, "2" ) field( TWST, "ControlWord" )
	field( THVL, "3" ) field( THST, "INVALID" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EvrV2:RateType_RBV" )
	info( autosaveFields, "" )
}

# EvrV2 Rate Select, Common to both LCLS-I and LCLS-II timing, but different ranges for each
record( longin, "$(P)$(R)EvrV2:RateSel_RBV" )
{
	field( DESC, "EvrV2 Rate Select" )
	field( INP,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].RateSel" )
	field( DTYP, "RogueLI" )
	info( autosaveFields, "" )
}

record( longout, "$(P)$(R)Lcls1:RateSel" )
{
	field( DESC, "Ch$(L) Lcls1 RateSel" )
	field( DOL,  "45" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EvrV2:RateSelCalc" )
	info( autosaveFields, "VAL" )
}

record( longout, "$(P)$(R)Lcls2:RateSel" )
{
	field( DESC, "Ch$(L) Lcls2 RateSel" )
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EvrV2:RateSelCalc" )
	info( autosaveFields, "VAL" )
}

record( calcout, "$(P)$(R)EvrV2:RateSelCalc" )
{
	field( INPA, "$(P)$(R)Lcls1:RateSel MS NPP" ) 
	field( INPB, "$(P)$(R)Lcls2:RateSel MS NPP" )
	field( INPC, "$(P):Timing:ClkSel MS NPP" )
	field( CALC, "C ? B : A" )
	field( OUT,  "$(P)$(R)EvrV2:RateSel MS CA" )
}

record( longout, "$(P)$(R)EvrV2:RateSel" )
{
	field( DESC, "EvrV2 RateSel LCLS-I & LCLS-II" )
	field( OUT,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.EvrV2CoreTriggers.EvrV2ChannelReg[$(L)].RateSel" )
	field( DTYP, "RogueLO" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)EvrV2:RateSel_RBV" )
}
#alias( "$(P)$(R)EvrV2:RateSel", "$(P)$(R)EvrV2:EventCode" )

record( mbbi, "$(P)$(R)Timing:TriggerSource_RBV" )
{
	field( DESC, "TriggerEventManager Trigger Source" )
	field( DTYP, "RogueMBBI" )
	field( INP,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.TriggerEventBuffer[$(L)].TriggerSource" )
	field( ZRVL, "0" ) field( ZRST, "XPM" )
	field( ONVL, "1" ) field( ONST, "EVR" )
}
record( mbbo, "$(P)$(R)Timing:TriggerSource" )
{
	field( DESC, "TriggerEventManager Trigger Source" )
	field( DTYP, "RogueMBBO" )
	field( PINI, "YES" )
	field( DOL,  "0" )
	field( OUT,  "@B$(B) L$(L) $(PTOP).TriggerEventManager.TriggerEventBuffer[$(L)].TriggerSource" )
	field( ZRVL, "0" ) field( ZRST, "XPM" )
	field( ONVL, "1" ) field( ONST, "EVR" )
	field( FLNK, "$(P)$(R)Timing:TriggerSource_RBV" )
	info( autosaveFields, "VAL" )
}

record( waveform, "$(P)$(R)AxiVersion:BuildStamp" )
{
#	field( DTYP, "asynInt8ArrayIn" )
	field( NELM, "2048" )
	field( FTVL, "CHAR" )
	field( INP,  "@B$(B) L$(L) $(PTOP).AxiVersion.BuildStamp" )
	field( PINI, "YES" )
	info( archiveFields,  "VAL" )
}

